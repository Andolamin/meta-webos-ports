From 3cc5c323b92a2ce5f1093768f943e89a2d8e6d59 Mon Sep 17 00:00:00 2001
From: Simon Busch <morphis@gravedo.de>
Date: Fri, 21 Sep 2012 09:35:55 +0200
Subject: [PATCH 2/2] Add MACHINE_PUBLIC_QUIRKS define to exclude things are
 not public yet for TARGET_DEVICE

Open-webOS-DCO-1.0-Signed-off-by: Simon Busch <morphis@gravedo.de>
---
 Src/base/CpuAffinity.cpp                    |    6 +++---
 Src/base/KeyboardMapping.h                  |    2 +-
 Src/base/MemoryMonitor.cpp                  |   12 ++++++------
 Src/base/MemoryMonitor.h                    |    6 +++---
 Src/base/application/ApplicationManager.cpp |    6 +++---
 Src/base/hosts/HostArm.cpp                  |   13 ++++++++-----
 Src/base/hosts/HostArm.h                    |    4 ++--
 Src/sound/SoundPlayerPool.h                 |    2 +-
 Src/webbase/MemoryWatcher.cpp               |    4 ++--
 Src/webbase/MemoryWatcher.h                 |    6 +++---
 10 files changed, 32 insertions(+), 29 deletions(-)

diff --git a/Src/base/CpuAffinity.cpp b/Src/base/CpuAffinity.cpp
index f9e46b0..4063b68 100644
--- a/Src/base/CpuAffinity.cpp
+++ b/Src/base/CpuAffinity.cpp
@@ -25,7 +25,7 @@
 #include <glib.h>
 #include <string.h>
 
-#if defined(TARGET_DEVICE)
+#if defined(TARGET_DEVICE) && !(MACHINE_PUBLIC_QUIRKS)
 #include <libaffinity.h>
 #endif
 
@@ -33,7 +33,7 @@
 
 void setCpuAffinity(int pid, int processor)
 {
-#if defined(TARGET_DEVICE)
+#if defined(TARGET_DEVICE) && !defined(MACHINE_PUBLIC_QUIRKS)
 	int ret = libaffinity_set_affinity(pid, processor);
 	if (ret)
 		g_warning("Failed to set cpu affinity for process %d to processor %d: retVal: %d, errno: %s",
@@ -46,7 +46,7 @@ void setCpuAffinity(int pid, int processor)
 
 void resetCpuAffinity(int pid)
 {
-#if defined(TARGET_DEVICE)
+#if defined(TARGET_DEVICE) && !defined(MACHINE_PUBLIC_QUIRKS)
     int ret = libaffinity_reset_affinity(pid);
 	if (ret)
 		g_warning("Failed to reset cpu affinity for process %d: retVal: %d, errno: %s",
diff --git a/Src/base/KeyboardMapping.h b/Src/base/KeyboardMapping.h
index 1af5942..643da57 100644
--- a/Src/base/KeyboardMapping.h
+++ b/Src/base/KeyboardMapping.h
@@ -26,7 +26,7 @@
 
 #include <Qt>
 
-#if (defined(TARGET_DESKTOP) || defined(TARGET_EMULATOR))
+#if (defined(TARGET_DESKTOP) || defined(TARGET_EMULATOR)) || defined(MACHINE_PUBLIC_QUIRKS)
 
 typedef struct {
         int devicekey;
diff --git a/Src/base/MemoryMonitor.cpp b/Src/base/MemoryMonitor.cpp
index d07c0ba..f9eb610 100644
--- a/Src/base/MemoryMonitor.cpp
+++ b/Src/base/MemoryMonitor.cpp
@@ -90,7 +90,7 @@ void MemoryMonitor::start()
 	
 	m_timer.start(kTimerMs);
 
-#if defined(TARGET_DEVICE)
+#if defined(TARGET_DEVICE) && !defined(MACHINE_PUBLIC_QUIRKS)
 	m_memWatch = MemchuteWatcherNew(MemoryMonitor::memchuteCallback);
 	if (m_memWatch != NULL) {
 		MemchuteGmainAttach(m_memWatch, HostBase::instance()->mainLoop());
@@ -119,7 +119,7 @@ static const char* nameForState(MemoryMonitor::MemState state)
 
 bool MemoryMonitor::timerTicked()
 {
-#if defined(TARGET_DEVICE)
+#if defined(TARGET_DEVICE) && !defined(MACHINE_PUBLIC_QUIRKS)
 	if (!memRestrict.empty())
 		checkMonitoredProcesses();
 #endif
@@ -312,7 +312,7 @@ int MemoryMonitor::getProcessMemInfo(pid_t pid)
 
 void MemoryMonitor::monitorNativeProcessMemory(pid_t pid, int maxMemAllowed, pid_t updateFromPid)
 {
-#if defined(TARGET_DEVICE)
+#if defined(TARGET_DEVICE) && !defined(MACHINE_PUBLIC_QUIRKS)
 	if(updateFromPid > 0){
 		// updating an existing monitor, so find it and remove it first
 		ProcMemRestrictions::iterator old = memRestrict.find(updateFromPid);
@@ -338,7 +338,7 @@ void MemoryMonitor::monitorNativeProcessMemory(pid_t pid, int maxMemAllowed, pid
 #endif
 }
 
-#if defined(TARGET_DEVICE)
+#if defined(TARGET_DEVICE) && !defined(MACHINE_PUBLIC_QUIRKS)
 int MemoryMonitor::getMonitoredProcessesMemoryOffset()
 {
 	int offset = 0;	
@@ -433,7 +433,7 @@ bool MemoryMonitor::allowNewNativeAppLaunch(int appMemoryRequirement)
 		return false;
 	}
 	
-#if defined(TARGET_DEVICE)  
+#if defined(TARGET_DEVICE) && !defined(MACHINE_PUBLIC_QUIRKS)
 	int lowMemoryEntryRem, criticalMemoryEntryRem, rebootMemoryEntryRem;
 	getMemInfo(lowMemoryEntryRem, criticalMemoryEntryRem, rebootMemoryEntryRem);
 
@@ -451,7 +451,7 @@ bool MemoryMonitor::allowNewNativeAppLaunch(int appMemoryRequirement)
 	return true;
 }
 
-#if defined(TARGET_DEVICE)    
+#if defined(TARGET_DEVICE) && !defined(MACHINE_PUBLIC_QUIRKS)
 void MemoryMonitor::memchuteCallback(MemchuteThreshold threshold)
 {
 	MemoryMonitor* mw = MemoryMonitor::instance();	
diff --git a/Src/base/MemoryMonitor.h b/Src/base/MemoryMonitor.h
index 5035f4b..7aec5b9 100644
--- a/Src/base/MemoryMonitor.h
+++ b/Src/base/MemoryMonitor.h
@@ -31,7 +31,7 @@
 #include "Timer.h"
 #include "Mutex.h"
 
-#if defined(TARGET_DEVICE)
+#if defined(TARGET_DEVICE) && !defined(MACHINE_PUBLIC_QUIRKS)
 extern "C" {
 #include <memchute.h>
 }
@@ -76,7 +76,7 @@ private:
 
 	int getProcessMemInfo(pid_t pid);
 	
-#if defined(TARGET_DEVICE)
+#if defined(TARGET_DEVICE) && !defined(MACHINE_PUBLIC_QUIRKS)
     static void memchuteCallback(MemchuteThreshold threshold);
 	void memchuteStateChanged();
     int getMonitoredProcessesMemoryOffset();
@@ -93,7 +93,7 @@ private:
 
 	MemState m_state;	
 
-#if defined(TARGET_DEVICE)
+#if defined(TARGET_DEVICE) && !defined(MACHINE_PUBLIC_QUIRKS)
 	MemchuteWatcher* m_memWatch;
 	
 	typedef struct 
diff --git a/Src/base/application/ApplicationManager.cpp b/Src/base/application/ApplicationManager.cpp
index 96eb00b..c331357 100644
--- a/Src/base/application/ApplicationManager.cpp
+++ b/Src/base/application/ApplicationManager.cpp
@@ -45,7 +45,7 @@
 #include "dimensionsmain.h"
 #include "WindowServerLuna.h"
 
-#if !(defined(TARGET_DESKTOP) || defined(TARGET_EMULATOR))
+#if !(defined(TARGET_DESKTOP) || defined(TARGET_EMULATOR) || defined(MACHINE_PUBLIC_QUIRKS))
 // TODO:  Reactivate ServiceInstaller
 #include <serviceinstall.h>
 #endif
@@ -732,7 +732,7 @@ void ApplicationManager::createOrUpdatePackageManifest(PackageDescription* packa
 
 void ApplicationManager::serviceInstallerInstallApp(const std::string& id, const std::string& type, const std::string& root)
 {
-#if !(defined(TARGET_DESKTOP) || defined(TARGET_EMULATOR))
+#if !(defined(TARGET_DESKTOP) || defined(TARGET_EMULATOR) || defined(MACHINE_PUBLIC_QUIRKS))
 // TODO:  Reactivate ServiceInstaller
 	::installApp(id, type, root);
 #endif
@@ -740,7 +740,7 @@ void ApplicationManager::serviceInstallerInstallApp(const std::string& id, const
 
 void ApplicationManager::serviceInstallerUninstallApp(const std::string& id, const std::string& type, const std::string& root)
 {
-#if !(defined(TARGET_DESKTOP) || defined(TARGET_EMULATOR))
+#if !(defined(TARGET_DESKTOP) || defined(TARGET_EMULATOR) || defined(MACHINE_PUBLIC_QUIRKS))
 // TODO:  Reactivate ServiceInstaller
 	::uninstallApp(id, type, root);
 #endif
diff --git a/Src/base/hosts/HostArm.cpp b/Src/base/hosts/HostArm.cpp
index c22fc3f..2c43d61 100644
--- a/Src/base/hosts/HostArm.cpp
+++ b/Src/base/hosts/HostArm.cpp
@@ -60,7 +60,7 @@
 #include "Logging.h"
 #include "SystemUiController.h"
 
-#if defined(TARGET_DEVICE)
+#if defined(TARGET_DEVICE) && !defined(MACHINE_PUBLIC_QUIRKS)
 #include "HidLib.h"
 #endif
 
@@ -73,7 +73,7 @@
 // TODO: these should come from hidd headers
 #define MAX_HIDD_EVENTS 100 
 
-#if defined(TARGET_DEVICE)
+#if defined(TARGET_DEVICE) 
 //TODO: Move me to a header!
 extern "C" void setTransform(QTransform*);
 extern "C" InputControl* getTouchpanel(void);
@@ -90,7 +90,7 @@ static void bluetoothCallback(bool enable)
 HostArm::HostArm() :
       m_nyxLightNotifier(NULL)
 	, m_nyxProxNotifier(NULL)
-#if defined(TARGET_DEVICE)
+#if defined(TARGET_DEVICE) && !defined(MACHINE_PUBLIC_QUIRKS)
 	, m_hwRev(HidHardwareRevisionEVT1)
 	, m_hwPlatform (HidHardwarePlatformCastle)
 #endif
@@ -110,7 +110,7 @@ HostArm::HostArm() :
     , m_bluetoothKeyboardActive(false)
     , m_OrientationSensor(0)
 {
-#if defined(TARGET_DEVICE)
+#if defined(TARGET_DEVICE) && !defined(MACHINE_PUBLIC_QUIRKS)
 	m_hwRev = HidGetHardwareRevision();
 	m_hwPlatform = HidGetHardwarePlatform();
 	setBluetoothCallback(&bluetoothCallback);
@@ -549,6 +549,7 @@ bool HostArm::switchStateCallback(LSHandle* handle, LSMessage* msg, void* data)
 
 	Qt::Key switchKey = Qt::Key_unknown;
 	switch (switchCode) {
+#if !defined(MACHINE_PUBLIC_QUIRKS)
 	case SW_RINGER:
 		switchKey = Qt::Key_Ringer;
 		break;
@@ -563,10 +564,10 @@ bool HostArm::switchStateCallback(LSHandle* handle, LSMessage* msg, void* data)
 			switchKey = Qt::Key_Headset;
 		}
 		break;
+#endif
 	default: 
 		return true;
 	}
-
 	// SysMgrNativeKeyboardModifier_InitialState is used to signify key events which are sent as initial state events
 	QApplication::postEvent(QApplication::activeWindow(),
 							QKeyEvent::createExtendedKeyEvent(value == 0 ?  QEvent::KeyRelease : QEvent::KeyPress,
@@ -580,6 +581,7 @@ void HostArm::getInitialSwitchStates()
 	LSError err;
 	LSErrorInit(&err);
 
+#if !defined(MACHINE_PUBLIC_QUIRKS)
 	if (!LSCall(m_service, HIDD_RINGER_URI, HIDD_GET_STATE, HostArm::switchStateCallback, (void*)SW_RINGER, NULL, &err))
 		goto Error;
 
@@ -588,6 +590,7 @@ void HostArm::getInitialSwitchStates()
 
 	if (!LSCall(m_service, HIDD_HEADSET_URI, HIDD_GET_STATE, HostArm::switchStateCallback, (void*)SW_HEADPHONE_INSERT, NULL, &err))
 		goto Error;
+#endif
 
 	return;
 
diff --git a/Src/base/hosts/HostArm.h b/Src/base/hosts/HostArm.h
index 7218444..f1c6b50 100644
--- a/Src/base/hosts/HostArm.h
+++ b/Src/base/hosts/HostArm.h
@@ -33,7 +33,7 @@
 #include "NyxInputControl.h"
 #include "NyxLedControl.h"
 
-#if defined(TARGET_DEVICE)
+#if defined(TARGET_DEVICE) && !defined(MACHINE_PUBLIC_QUIRKS)
 #include "HidLib.h"
 #endif
 #include "lunaservice.h"
@@ -145,7 +145,7 @@ protected:
 
 	virtual void setCentralWidget(QWidget* view);
 
-#if defined(TARGET_DEVICE)
+#if defined(TARGET_DEVICE) && !defined(MACHINE_PUBLIC_QUIRKS)
 	HidHardwareRevision_t m_hwRev;
 	HidHardwarePlatform_t m_hwPlatform;
 #endif
diff --git a/Src/sound/SoundPlayerPool.h b/Src/sound/SoundPlayerPool.h
index bbe68d4..86206ff 100644
--- a/Src/sound/SoundPlayerPool.h
+++ b/Src/sound/SoundPlayerPool.h
@@ -31,7 +31,7 @@
 #include "sptr.h"
 #include "Timer.h"
 
-#if defined(TARGET_DESKTOP) || defined(TARGET_EMULATOR)
+#if defined(TARGET_DESKTOP) || defined(TARGET_EMULATOR) || (MACHINE_PUBLIC_QUIRKS)
 #include "SoundPlayerDummy.h"
 #else
 #include "SoundPlayer.h"
diff --git a/Src/webbase/MemoryWatcher.cpp b/Src/webbase/MemoryWatcher.cpp
index ba0b17c..f15a7c7 100644
--- a/Src/webbase/MemoryWatcher.cpp
+++ b/Src/webbase/MemoryWatcher.cpp
@@ -81,7 +81,7 @@ void MemoryWatcher::start()
 	
 	m_timer.start(kTimerMs);
 
-#if defined(TARGET_DEVICE)
+#if defined(TARGET_DEVICE) && !defined(MACHINE_PUBLIC_QUIRKS)
 	m_memWatch = MemchuteWatcherNew(MemoryWatcher::memchuteCallback);
 	if (m_memWatch != NULL) {
 		MemchuteGmainAttach(m_memWatch, WebAppManager::instance()->mainLoop());
@@ -195,7 +195,7 @@ void MemoryWatcher::doLowMemActions(bool allowExpensive)
     g_warning("MemoryWatcher: RSS usage after low memory actions: %dMB\n", m_currRssUsage);
 }
 
-#if defined(TARGET_DEVICE)    
+#if defined(TARGET_DEVICE) && !defined(MACHINE_PUBLIC_QUIRKS)
 void MemoryWatcher::memchuteCallback(MemchuteThreshold threshold)
 {
 	MemoryWatcher* mw = MemoryWatcher::instance();
diff --git a/Src/webbase/MemoryWatcher.h b/Src/webbase/MemoryWatcher.h
index bba6ca6..4faacd5 100644
--- a/Src/webbase/MemoryWatcher.h
+++ b/Src/webbase/MemoryWatcher.h
@@ -30,7 +30,7 @@
 #include "SignalSlot.h"
 #include "Timer.h"
 
-#if defined(TARGET_DEVICE)
+#if defined(TARGET_DEVICE) && !defined(MACHINE_PUBLIC_QUIRKS)
 extern "C" {
 #include <memchute.h>
 }
@@ -67,7 +67,7 @@ private:
 	bool timerTicked();
 	int getCurrentRssUsage() const;
 
-#if defined(TARGET_DEVICE)    
+#if defined(TARGET_DEVICE) && !defined(MACHINE_PUBLIC_QUIRKS)
     static void memchuteCallback(MemchuteThreshold threshold);
 #endif
 
@@ -90,7 +90,7 @@ private:
 	MemState m_lastNotifiedState;
 	
 
-#if defined(TARGET_DEVICE)
+#if defined(TARGET_DEVICE) && !defined(MACHINE_PUBLIC_QUIRKS)
 	int m_memchuteCriticalThreshold;
 	MemchuteWatcher* m_memWatch;
 #endif	
-- 
1.7.9.5

