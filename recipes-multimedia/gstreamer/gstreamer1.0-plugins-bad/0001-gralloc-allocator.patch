From 13933816ab87eb8f01301db8c6b2e6a257d501fd Mon Sep 17 00:00:00 2001
From: Mohammed Sameer <msameer@foolab.org>
Date: Wed, 6 Aug 2014 23:55:27 +0300
Subject: [PATCH] gralloc allocator

---
 configure.ac                                  |  20 ++
 gst-libs/gst/Makefile.am                      |   6 +-
 gst-libs/gst/gralloc/Makefile.am              |  24 ++
 gst-libs/gst/gralloc/gstgralloc.c             | 316 ++++++++++++++++++++++++++
 gst-libs/gst/gralloc/gstgralloc.h             |  51 +++++
 pkgconfig/Makefile.am                         |   8 +-
 pkgconfig/gstreamer-gralloc-uninstalled.pc.in |  12 +
 pkgconfig/gstreamer-gralloc.pc.in             |  12 +
 8 files changed, 447 insertions(+), 2 deletions(-)
 create mode 100644 gst-libs/gst/gralloc/Makefile.am
 create mode 100644 gst-libs/gst/gralloc/gstgralloc.c
 create mode 100644 gst-libs/gst/gralloc/gstgralloc.h
 create mode 100644 pkgconfig/gstreamer-gralloc-uninstalled.pc.in
 create mode 100644 pkgconfig/gstreamer-gralloc.pc.in

diff --git a/configure.ac b/configure.ac
index 1a46afb..f010cc2 100644
--- a/configure.ac
+++ b/configure.ac
@@ -636,6 +636,14 @@ AC_ARG_ENABLE([dispmanx],
        *) AC_MSG_ERROR([bad value ${enableval} for --enable-dispmanx]) ;;
      esac],[NEED_DISPMANX=auto])
 
+AC_ARG_ENABLE([gralloc],
+     [  --enable-gralloc        Enable Android Gralloc support @<:@default=no@:>@],
+     [case "${enableval}" in
+       yes)  NEED_GRALLOC=yes ;;
+       no)   NEED_GRALLOC=no ;;
+       *) AC_MSG_ERROR([bad value ${enableval} for --enable-gralloc]) ;;
+     esac],[NEED_GRALLOC=no])
+
 AG_GST_CHECK_X
 save_CPPFLAGS="$CPPFLAGS"
 save_LIBS="$LIBS"
@@ -1398,6 +1406,15 @@ _______EOF
 gl_config_defines='$GL_CONFIG_DEFINES'
 ])
 
+dnl libhardware (needed for gralloc)
+if test "x$NEED_GRALLOC" = "xyes"; then
+  PKG_CHECK_MODULES(LIBHARDWARE, libhardware, HAVE_HARDWARE=yes, HAVE_HARDWARE=no)
+fi
+
+AC_SUBST(HARDWARE_CFLAGS)
+AC_SUBST(HARDWARE_LIBS)
+AM_CONDITIONAL(HAVE_GRALLOC, test "x$HAVE_HARDWARE" = "xyes")
+
 dnl libpng is optional
 PKG_CHECK_MODULES(LIBPNG, libpng >= 1.0, HAVE_PNG=yes, HAVE_PNG=no)
 if test "x$HAVE_PNG" = "xyes"; then
@@ -3234,6 +3251,7 @@ gst-libs/gst/gl/egl/Makefile
 gst-libs/gst/gl/wayland/Makefile
 gst-libs/gst/gl/win32/Makefile
 gst-libs/gst/gl/x11/Makefile
+gst-libs/gst/gralloc/Makefile
 gst-libs/gst/insertbin/Makefile
 gst-libs/gst/interfaces/Makefile
 gst-libs/gst/codecparsers/Makefile
@@ -3384,6 +3402,8 @@ pkgconfig/gstreamer-bad-base.pc
 pkgconfig/gstreamer-bad-base-uninstalled.pc
 pkgconfig/gstreamer-bad-video.pc
 pkgconfig/gstreamer-bad-video-uninstalled.pc
+pkgconfig/gstreamer-gralloc.pc
+pkgconfig/gstreamer-gralloc-uninstalled.pc
 tools/Makefile
 m4/Makefile
 )
diff --git a/gst-libs/gst/Makefile.am b/gst-libs/gst/Makefile.am
index b3f23f4..9b79e79 100644
--- a/gst-libs/gst/Makefile.am
+++ b/gst-libs/gst/Makefile.am
@@ -10,8 +10,12 @@ if USE_WAYLAND
 WAYLAND_DIR=wayland
 endif
 
+if HAVE_GRALLOC
+GRALLOC_DIR=gralloc
+endif
+
 SUBDIRS = interfaces basecamerabinsrc codecparsers \
-	 insertbin uridownloader mpegts base video $(GL_DIR) $(WAYLAND_DIR)
+	 insertbin uridownloader mpegts base video $(GL_DIR) $(WAYLAND_DIR) $(GRALLOC_DIR)
 
 noinst_HEADERS = gst-i18n-plugin.h gettext.h glib-compat-private.h
 DIST_SUBDIRS = interfaces gl basecamerabinsrc codecparsers \
diff --git a/gst-libs/gst/gralloc/Makefile.am b/gst-libs/gst/gralloc/Makefile.am
new file mode 100644
index 0000000..881afa7
--- /dev/null
+++ b/gst-libs/gst/gralloc/Makefile.am
@@ -0,0 +1,24 @@
+lib_LTLIBRARIES = libgstgralloc-@GST_API_VERSION@.la
+
+libgstgralloc_@GST_API_VERSION@_la_SOURCES = gstgralloc.c
+
+libgstgralloc_@GST_API_VERSION@includedir = \
+	$(includedir)/gstreamer-@GST_API_VERSION@/gst/gralloc
+
+libgstgralloc_@GST_API_VERSION@include_HEADERS = \
+	gstgralloc.h
+
+libgstgralloc_@GST_API_VERSION@_la_CFLAGS = \
+	$(GST_PLUGINS_BAD_CFLAGS) \
+	$(GST_PLUGINS_BASE_CFLAGS) \
+	$(GST_CFLAGS) \
+	$(LIBHARDWARE_CFLAGS)
+
+libgstgralloc_@GST_API_VERSION@_la_LIBADD = \
+	$(GST_LIBS) \
+	$(LIBHARDWARE_LIBS)
+
+libgstgralloc_@GST_API_VERSION@_la_LDFLAGS = \
+	$(GST_LIB_LDFLAGS) \
+	$(GST_ALL_LDFLAGS) \
+	$(GST_LT_LDFLAGS)
diff --git a/gst-libs/gst/gralloc/gstgralloc.c b/gst-libs/gst/gralloc/gstgralloc.c
new file mode 100644
index 0000000..450e98d
--- /dev/null
+++ b/gst-libs/gst/gralloc/gstgralloc.c
@@ -0,0 +1,316 @@
+/*
+ * gst-droid
+ *
+ * Copyright (C) 2014 Mohammed Sameer <msameer@foolab.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <gst/gst.h>
+#include "gstgralloc.h"
+#include <hardware/gralloc.h>
+#include <system/window.h>
+
+GST_DEBUG_CATEGORY_STATIC (gralloc_memory_debug);
+#define GST_CAT_DEFAULT gralloc_memory_debug
+
+#define container_of(ptr, type, member) ({                      \
+        const typeof( ((type *)0)->member ) *__mptr = (ptr);    \
+        (type *)( (char *)__mptr - offsetof(type,member) );})
+
+typedef struct
+{
+  GstAllocator parent;
+
+  gralloc_module_t *gralloc;
+  alloc_device_t *alloc;
+  GMutex mutex;
+
+} GstGrallocAllocator;
+
+typedef struct
+{
+  GstAllocatorClass parent_class;
+
+} GstGrallocAllocatorClass;
+
+typedef struct
+{
+  GstMemory mem;
+
+  struct ANativeWindowBuffer buff;
+
+} GstGrallocMemory;
+
+#define gralloc_mem_allocator_parent_class parent_class
+G_DEFINE_TYPE (GstGrallocAllocator, gralloc_mem_allocator, GST_TYPE_ALLOCATOR);
+
+#define GST_TYPE_GRALLOC_ALLOCATOR    (gralloc_mem_allocator_get_type())
+#define GST_IS_GRALLOC_ALLOCATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GST_TYPE_GRALLOC_ALLOCATOR))
+#define GST_GRALLOC_ALLOCATOR(obj)    (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_GRALLOC_ALLOCATOR,GstGrallocAllocator))
+
+static gboolean gst_gralloc_mem_is_span (GstMemory * mem1, GstMemory * mem2,
+    gsize * offset);
+static void gst_gralloc_allocator_free (GstAllocator * allocator,
+    GstMemory * mem);
+
+static void
+incRef (struct android_native_base_t *base)
+{
+  struct ANativeWindowBuffer *self =
+      container_of (base, struct ANativeWindowBuffer, common);
+  GstGrallocMemory *mem = container_of (self, GstGrallocMemory, buff);
+
+  gst_memory_ref (GST_MEMORY_CAST (mem));
+}
+
+static void
+decRef (struct android_native_base_t *base)
+{
+  struct ANativeWindowBuffer *self =
+      container_of (base, struct ANativeWindowBuffer, common);
+  GstGrallocMemory *mem = container_of (self, GstGrallocMemory, buff);
+
+  gst_memory_unref (GST_MEMORY_CAST (mem));
+}
+
+
+GstAllocator *
+gst_gralloc_allocator_new (void)
+{
+  GST_DEBUG_CATEGORY_INIT (gralloc_memory_debug, "gralloc", 0,
+      "Gralloc memory allocator");
+
+  return g_object_new (GST_TYPE_GRALLOC_ALLOCATOR, NULL);
+}
+
+static void
+gralloc_mem_allocator_init (GstGrallocAllocator * allocator)
+{
+  GstAllocator *alloc = GST_ALLOCATOR_CAST (allocator);
+
+  GST_DEBUG_OBJECT (alloc, "init");
+
+  allocator->gralloc = NULL;
+  allocator->alloc = NULL;
+  g_mutex_init (&allocator->mutex);
+  alloc->mem_type = GST_ALLOCATOR_GRALLOC;
+
+  alloc->mem_map = NULL;
+  alloc->mem_unmap = NULL;
+  alloc->mem_copy = NULL;
+  alloc->mem_share = NULL;
+  alloc->mem_is_span = gst_gralloc_mem_is_span;
+
+  GST_OBJECT_FLAG_SET (allocator, GST_ALLOCATOR_FLAG_CUSTOM_ALLOC);
+}
+
+static void
+gst_gralloc_allocator_finalize (GObject * obj)
+{
+  GstGrallocAllocator *alloc = GST_GRALLOC_ALLOCATOR (obj);
+
+  GST_DEBUG_OBJECT (alloc, "finalize");
+
+  if (alloc->alloc) {
+    gralloc_close (alloc->alloc);
+  }
+
+  g_mutex_clear (&alloc->mutex);
+
+  G_OBJECT_CLASS (parent_class)->finalize (obj);
+}
+
+static void
+gralloc_mem_allocator_class_init (GstGrallocAllocatorClass * klass)
+{
+  GObjectClass *gobject_class = (GObjectClass *) klass;
+  GstAllocatorClass *allocator_class = (GstAllocatorClass *) klass;
+
+  gobject_class->finalize = gst_gralloc_allocator_finalize;
+
+  allocator_class->alloc = NULL;
+  allocator_class->free = gst_gralloc_allocator_free;
+}
+
+GstMemory *
+gst_gralloc_allocator_alloc (GstAllocator * allocator, gint width, gint height,
+    int format, int usage)
+{
+  GstGrallocAllocator *alloc;
+  int err;
+  GstGrallocMemory *mem;
+  int stride;
+
+  if (!GST_IS_GRALLOC_ALLOCATOR (allocator)) {
+    GST_WARNING ("it isn't the correct allocator for gralloc");
+    return NULL;
+  }
+
+  alloc = GST_GRALLOC_ALLOCATOR (allocator);
+
+  g_mutex_lock (&alloc->mutex);
+  if (!alloc->gralloc) {
+    err =
+        hw_get_module (GRALLOC_HARDWARE_MODULE_ID,
+        (const hw_module_t **) &alloc->gralloc);
+    if (!alloc->gralloc) {
+      GST_ERROR ("failed to initialize gralloc: %d", err);
+      g_mutex_unlock (&alloc->mutex);
+      return NULL;
+    }
+
+    err = gralloc_open ((const hw_module_t *) alloc->gralloc, &alloc->alloc);
+    if (err) {
+      GST_ERROR ("failed to open gralloc: %d", err);
+      alloc->gralloc = NULL;
+      alloc->alloc = NULL;
+      g_mutex_unlock (&alloc->mutex);
+      return NULL;
+    }
+  }
+
+  /* Now we are ready to serve */
+  mem = g_slice_new0 (GstGrallocMemory);
+
+  err = alloc->alloc->alloc (alloc->alloc, width, height,
+      format, usage, &mem->buff.handle, &stride);
+  if (err) {
+    GST_ERROR ("Failed to allocate buffer handle");
+    g_slice_free (GstGrallocMemory, mem);
+    g_mutex_unlock (&alloc->mutex);
+    return NULL;
+  }
+
+  mem->buff.width = width;
+  mem->buff.height = height;
+  mem->buff.stride = stride;
+  mem->buff.format = format;
+  mem->buff.usage = usage;
+  mem->buff.common.magic = ANDROID_NATIVE_BUFFER_MAGIC;
+  mem->buff.common.version = sizeof (struct ANativeWindowBuffer);
+  mem->buff.common.incRef = incRef;
+  mem->buff.common.decRef = decRef;
+
+  g_mutex_unlock (&alloc->mutex);
+
+  gst_memory_init (GST_MEMORY_CAST (mem),
+      GST_MEMORY_FLAG_NO_SHARE | GST_MEMORY_FLAG_NOT_MAPPABLE, allocator, NULL,
+      0, 0, 0, 0);
+
+  GST_DEBUG_OBJECT (alloc, "alloc %p", mem);
+
+  return GST_MEMORY_CAST (mem);
+}
+
+GstMemory *
+gst_gralloc_allocator_wrap (GstAllocator * allocator, gint width, gint height,
+    int usage, guint8 * data, gsize size, int hal_format)
+{
+  GstGrallocAllocator *alloc;
+  int err;
+  void *addr = NULL;
+  GstMemory *mem;
+
+  if (!GST_IS_GRALLOC_ALLOCATOR (allocator)) {
+    return NULL;
+  }
+
+  alloc = GST_GRALLOC_ALLOCATOR (allocator);
+
+  mem = gst_gralloc_allocator_alloc (allocator, width, height,
+      hal_format, usage);
+
+  if (!mem) {
+    return NULL;
+  }
+
+  /* lock */
+  err =
+      alloc->gralloc->lock (alloc->gralloc,
+      ((GstGrallocMemory *) mem)->buff.handle,
+      GRALLOC_USAGE_SW_READ_RARELY | GRALLOC_USAGE_SW_WRITE_RARELY, 0, 0,
+      width, height, &addr);
+  if (err != 0) {
+    gst_memory_unref (mem);
+    GST_ERROR ("failed to lock the buffer: %d", err);
+    return NULL;
+  }
+
+  /* copy */
+  memcpy (addr, data, size);
+
+  /* unlock */
+  err =
+      alloc->gralloc->unlock (alloc->gralloc,
+      ((GstGrallocMemory *) mem)->buff.handle);
+  if (err != 0) {
+    gst_memory_unref (mem);
+    GST_ERROR ("failed to unlock the buffer: %d", err);
+    return NULL;
+  }
+
+  GST_DEBUG_OBJECT (alloc, "wrapped %p of size %d in %p", data, size, mem);
+
+  return mem;
+}
+
+gboolean
+gst_is_gralloc_memory (GstMemory * mem)
+{
+  return gst_memory_is_type (mem, GST_ALLOCATOR_GRALLOC);
+}
+
+static gboolean
+gst_gralloc_mem_is_span (GstMemory * mem1, GstMemory * mem2, gsize * offset)
+{
+  return FALSE;
+}
+
+static void
+gst_gralloc_allocator_free (GstAllocator * allocator, GstMemory * mem)
+{
+  GstGrallocMemory *m = (GstGrallocMemory *) mem;
+  GstGrallocAllocator *alloc = GST_GRALLOC_ALLOCATOR (allocator);
+
+  GST_DEBUG_OBJECT (alloc, "free %p", m);
+
+  alloc->alloc->free (alloc->alloc, m->buff.handle);
+
+  g_slice_free (GstGrallocMemory, m);
+}
+
+struct ANativeWindowBuffer *
+gst_memory_get_native_buffer (GstMemory * mem)
+{
+  if (!gst_is_gralloc_memory (mem)) {
+    return NULL;
+  }
+
+  return &((GstGrallocMemory *) mem)->buff;
+}
+
+GstMemory *
+gst_memory_from_native_buffer (struct ANativeWindowBuffer * buffer)
+{
+  GstGrallocMemory *mem = container_of (buffer, GstGrallocMemory, buff);
+
+  return GST_MEMORY_CAST (mem);
+}
diff --git a/gst-libs/gst/gralloc/gstgralloc.h b/gst-libs/gst/gralloc/gstgralloc.h
new file mode 100644
index 0000000..cd35650
--- /dev/null
+++ b/gst-libs/gst/gralloc/gstgralloc.h
@@ -0,0 +1,51 @@
+/*
+ * gst-droid
+ *
+ * Copyright (C) 2014 Mohammed Sameer <msameer@foolab.org>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public
+ * License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#ifndef __GST_GRALLOC_H__
+#define __GST_GRALLOC_H__
+
+#include <gst/gst.h>
+
+G_BEGIN_DECLS
+
+#define GST_ALLOCATOR_GRALLOC                     "gralloc"
+#define GST_CAPS_FEATURE_MEMORY_ANDROID_HANDLE    "memory:AndroidHandle"
+
+GstAllocator * gst_gralloc_allocator_new (void);
+
+GstMemory    * gst_gralloc_allocator_alloc (GstAllocator * allocator, gint width, gint height,
+					    int format, int usage);
+
+gboolean       gst_is_gralloc_memory (GstMemory * mem);
+
+GstMemory    * gst_gralloc_allocator_wrap (GstAllocator * allocator, gint width, gint height,
+					   int usage, guint8 * data,
+					   gsize size, int hal_format);
+
+// TODO: use GstContext to wrap this android specific struct
+struct ANativeWindowBuffer * gst_memory_get_native_buffer (GstMemory *mem);
+GstMemory *gst_memory_from_native_buffer(struct ANativeWindowBuffer * buffer);
+
+GType gralloc_mem_allocator_get_type (void);
+
+G_END_DECLS
+
+#endif /* __GST_GRALLOC_H__ */
diff --git a/pkgconfig/Makefile.am b/pkgconfig/Makefile.am
index 3e53a6e..830dabf 100644
--- a/pkgconfig/Makefile.am
+++ b/pkgconfig/Makefile.am
@@ -17,6 +17,11 @@ pcverfiles += gstreamer-gl-@GST_API_VERSION@.pc
 pcverfiles_uninstalled += gstreamer-gl-@GST_API_VERSION@-uninstalled.pc
 endif
 
+if HAVE_GRALLOC
+pcverfiles += gstreamer-gralloc-@GST_API_VERSION@.pc
+pcverfiles_uninstalled += gstreamer-gralloc-@GST_API_VERSION@-uninstalled.pc
+endif
+
 all-local: $(pcverfiles) $(pcverfiles_uninstalled)
 
 cp_verbose = $(cp_verbose_$(V))
@@ -38,7 +43,8 @@ pcinfiles = \
            gstreamer-codecparsers.pc.in gstreamer-codecparsers-uninstalled.pc.in \
            gstreamer-gl.pc.in gstreamer-gl-uninstalled.pc.in \
            gstreamer-insertbin.pc.in gstreamer-insertbin-uninstalled.pc.in \
-           gstreamer-mpegts.pc.in gstreamer-mpegts-uninstalled.pc.in
+           gstreamer-mpegts.pc.in gstreamer-mpegts-uninstalled.pc.in \
+           gstreamer-gralloc.pc.in gstreamer-gralloc-uninstalled.pc.in
 
 DISTCLEANFILES = $(pcinfiles:.in=)
 EXTRA_DIST = $(pcinfiles)
diff --git a/pkgconfig/gstreamer-gralloc-uninstalled.pc.in b/pkgconfig/gstreamer-gralloc-uninstalled.pc.in
new file mode 100644
index 0000000..5e5e552
--- /dev/null
+++ b/pkgconfig/gstreamer-gralloc-uninstalled.pc.in
@@ -0,0 +1,12 @@
+prefix=
+exec_prefix=
+libdir=${pcfiledir}/../gst-libs/gst/gralloc
+includedir=${pcfiledir}/../gst-libs
+
+Name: GStreamer Gralloc, Uninstalled
+Description: GStreamer Gralloc support, uninstalled
+Requires: gstreamer-1.0
+Version: 1.4.0
+Libs: -L${libdir} ${libdir}/libgstgralloc-1.0.la
+Cflags: -I${includedir}
+
diff --git a/pkgconfig/gstreamer-gralloc.pc.in b/pkgconfig/gstreamer-gralloc.pc.in
new file mode 100644
index 0000000..ea19f81
--- /dev/null
+++ b/pkgconfig/gstreamer-gralloc.pc.in
@@ -0,0 +1,12 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@/gstreamer-@GST_API_VERSION@
+
+Name: GStreamer Gralloc
+Description: GStreamer Gralloc support
+Requires: gstreamer-@GST_API_VERSION@
+Version: @VERSION@
+Libs: -L${libdir} -lgstgralloc-@GST_API_VERSION@
+Cflags: -I${includedir}
+
-- 
2.0.0

