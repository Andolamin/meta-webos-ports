From d8133d680a043de973845ea6edc008d7f5c34a90 Mon Sep 17 00:00:00 2001
From: Simon Busch <morphis@gravedo.de>
Date: Fri, 28 Feb 2014 07:19:37 +0100
Subject: [PATCH] Implement asynchronous suspend/resume methods for system
 module

Especially in Android based systems suspend isn't synchronous. They are working with
wakelocks and therefor the request to suspend is only an intent and the device will not
suspend as long as no wakelock is hold anymore. The system needs to detect manually
when it should switch back to a alive state. With the new API the power management
implementation can request suspending the system with calling the new suspend_async
method and resuming through the resume method.

Open-webOS-DCO-1.0-Signed-off-by: Simon Busch <morphis@gravedo.de>
---
 include/public/nyx/client/nyx_system.h          | 24 ++++++++++++++++++++++++
 include/public/nyx/module/nyx_device_internal.h |  4 ++++
 src/device/nyx_system_impl.c                    | 10 ++++++++++
 3 files changed, 38 insertions(+)

diff --git a/include/public/nyx/client/nyx_system.h b/include/public/nyx/client/nyx_system.h
index c1f6bd6..7a77ff9 100644
--- a/include/public/nyx/client/nyx_system.h
+++ b/include/public/nyx/client/nyx_system.h
@@ -105,6 +105,30 @@ NYX_API_EXPORT nyx_error_t nyx_system_query_rtc_time(nyx_device_handle_t handle,
 NYX_API_EXPORT nyx_error_t nyx_system_suspend(nyx_device_handle_t handle,
         bool *success);
 
+/**
+ * @brief Suspend the device asynchronously.
+ *
+ * @param[in]  handle - the handle returned from nyx_device_open
+ * @param[out] success - true if device was able to suspend
+ *
+ * @return error code (NYX_ERROR_NONE if operation is successful)
+ *
+ */
+
+NYX_API_EXPORT nyx_error_t nyx_system_suspend_async(nyx_device_handle_t handle,
+        bool *success);
+
+/**
+ * @brief Resume the device after it was suspended asynchronously.
+ *
+ * @param[in] handle - the handle returned from nyx_device_open
+ * @param[out] success - true if device was able to resume
+ *
+ * @return error code (NYX_ERROR_NONE if operation is successful)
+ */
+
+NYX_API_EXPORT nyx_error_t nyx_system_resume(nyx_device_handle_t handle,
+        bool *success);
 
 /**
  * @brief Shut down the device.
diff --git a/include/public/nyx/module/nyx_device_internal.h b/include/public/nyx/module/nyx_device_internal.h
index b93559c..3669489 100644
--- a/include/public/nyx/module/nyx_device_internal.h
+++ b/include/public/nyx/module/nyx_device_internal.h
@@ -93,6 +93,8 @@ typedef enum {
 	NYX_SYSTEM_QUERY_NEXT_ALARM_MODULE_METHOD,
 	NYX_SYSTEM_QUERY_RTC_TIME_MODULE_METHOD,
 	NYX_SYSTEM_SUSPEND_MODULE_METHOD,
+	NYX_SYSTEM_SUSPEND_ASYNC_MODULE_METHOD,
+	NYX_SYSTEM_RESUME_MODULE_METHOD,
 	NYX_SYSTEM_SHUTDOWN_MODULE_METHOD,
 	NYX_SYSTEM_REBOOT_MODULE_METHOD,
 	NYX_SYSTEM_ERASE_PARTITION_MODULE_METHOD,
@@ -246,6 +248,8 @@ typedef nyx_error_t (*nyx_system_query_next_alarm_function_t)(nyx_device_t *,
 typedef nyx_error_t (*nyx_system_query_rtc_time_function_t)(nyx_device_t *,
         time_t *);
 typedef nyx_error_t (*nyx_system_suspend_function_t)(nyx_device_t *, bool *);
+typedef nyx_error_t (*nyx_system_suspend_async_function_t)(nyx_device_t *, bool *);
+typedef nyx_error_t (*nyx_system_resume_function_t)(nyx_device_t *, bool *);
 typedef nyx_error_t (*nyx_system_shutdown_function_t)(nyx_device_t *,
         nyx_system_shutdown_type_t, const char *);
 typedef nyx_error_t (*nyx_system_reboot_function_t)(nyx_device_t *,
diff --git a/src/device/nyx_system_impl.c b/src/device/nyx_system_impl.c
index a0ca7e1..ccd78a9 100644
--- a/src/device/nyx_system_impl.c
+++ b/src/device/nyx_system_impl.c
@@ -55,6 +55,16 @@ nyx_error_t nyx_system_suspend(nyx_device_handle_t handle, bool *success)
 	nyx_execute_return_function(system_suspend, SYSTEM, SUSPEND, handle, success);
 }
 
+nyx_error_t nyx_system_suspend_async(nyx_device_handle_t handle, bool *success)
+{
+	nyx_execute_return_function(system_suspend_async, SYSTEM, SUSPEND_ASYNC, handle, success);
+}
+
+nyx_error_t nyx_system_resume(nyx_device_handle_t handle, bool *success)
+{
+	nyx_execute_return_function(system_resume, SYSTEM, RESUME, handle, success);
+}
+
 nyx_error_t nyx_system_shutdown(nyx_device_handle_t handle,
                                 nyx_system_shutdown_type_t type, const char *reason)
 {
-- 
1.9.1

