From a1a313701399aab2ed289c9988ff00b8f8ab28f6 Mon Sep 17 00:00:00 2001
From: Martin Jansa <Martin.Jansa@gmail.com>
Date: Thu, 23 Apr 2015 20:21:05 +0200
Subject: [PATCH] qsgtexture: Remove Filtering enum options to resolve conflict
 with X.h

* resolves conflict with X11 headers (X.h) which also defines "None":
  #ifndef None
  #define None                 0L /* universal null resource or null atom */
  #endif
* fixes error like this:
  In file included from usr/include/X11/Xlib.h:44:0,
                   from usr/include/EGL/eglplatform.h:118,
                   from usr/include/EGL/egl.h:36,
                   from luna-next/0.2.0-26+gitAUTOINC+6db63b7f8b-r0/build/plugins/performance/../../../git/plugins/performance/rendertimer.h:28,
                   from luna-next/0.2.0-26+gitAUTOINC+6db63b7f8b-r0/build/plugins/performance/../../../git/plugins/performance/renderingtimes.h:26,
                   from luna-next/0.2.0-26+gitAUTOINC+6db63b7f8b-r0/build/plugins/performance/moc_renderingtimes.cpp:9,
                   from luna-next/0.2.0-26+gitAUTOINC+6db63b7f8b-r0/build/plugins/performance/lunanext-performance-qml_automoc.cpp:5:
  usr/include/qt5/QtQuick/qsgtexture.h:59:9: error: expected identifier before numeric constant
           None,
           ^
  usr/include/qt5/QtQuick/qsgtexture.h:59:9: error: expected '}' before numeric constant
  usr/include/qt5/QtQuick/qsgtexture.h:59:9: error: expected unqualified-id before numeric constant

Change-Id: Ide26cfa2976d3e9519cfa630c629c14bc72565d0
Signed-off-by: Martin Jansa <Martin.Jansa@gmail.com>
---
 examples/quick/scenegraph/graph/noisynode.cpp              |  2 +-
 .../quick/scenegraph/textureinthread/threadrenderer.cpp    |  2 +-
 examples/quick/scenegraph/threadedanimation/spinner.cpp    |  2 +-
 src/particles/qquickimageparticle.cpp                      |  2 +-
 src/quick/items/context2d/qquickcanvasitem.cpp             |  4 ++--
 src/quick/items/qquickanimatedsprite.cpp                   |  2 +-
 src/quick/items/qquickborderimage.cpp                      |  4 ++--
 src/quick/items/qquickframebufferobject.cpp                |  2 +-
 src/quick/items/qquickimage.cpp                            |  8 ++++----
 src/quick/items/qquickshadereffectsource.cpp               | 14 +++++++-------
 src/quick/items/qquickspritesequence.cpp                   |  2 +-
 src/quick/scenegraph/util/qsgatlastexture.cpp              |  2 +-
 src/quick/scenegraph/util/qsgdefaultpainternode.cpp        |  8 ++++----
 src/quick/scenegraph/util/qsgsimpletexturenode.cpp         |  8 ++++----
 src/quick/scenegraph/util/qsgtexture.cpp                   |  8 ++++----
 src/quick/scenegraph/util/qsgtexture.h                     |  6 +++---
 src/quick/scenegraph/util/qsgtexture_p.h                   |  2 +-
 src/quick/scenegraph/util/qsgtexturematerial.cpp           | 10 +++++-----
 18 files changed, 44 insertions(+), 44 deletions(-)

diff --git a/examples/quick/scenegraph/graph/noisynode.cpp b/examples/quick/scenegraph/graph/noisynode.cpp
index 7b2a843..ab8311f 100644
--- a/examples/quick/scenegraph/graph/noisynode.cpp
+++ b/examples/quick/scenegraph/graph/noisynode.cpp
@@ -108,7 +108,7 @@ NoisyNode::NoisyNode(QQuickWindow *window)
     }
 
     QSGTexture *t = window->createTextureFromImage(image);
-    t->setFiltering(QSGTexture::Nearest);
+    t->setFiltering(QSGTexture::FilteringNearest);
     t->setHorizontalWrapMode(QSGTexture::Repeat);
     t->setVerticalWrapMode(QSGTexture::Repeat);
 
diff --git a/examples/quick/scenegraph/textureinthread/threadrenderer.cpp b/examples/quick/scenegraph/textureinthread/threadrenderer.cpp
index d840d39..f9a943c 100644
--- a/examples/quick/scenegraph/textureinthread/threadrenderer.cpp
+++ b/examples/quick/scenegraph/textureinthread/threadrenderer.cpp
@@ -152,7 +152,7 @@ public:
         // Our texture node must have a texture, so use the default 0 texture.
         m_texture = m_window->createTextureFromId(0, QSize(1, 1));
         setTexture(m_texture);
-        setFiltering(QSGTexture::Linear);
+        setFiltering(QSGTexture::FilteringLinear);
     }
 
     ~TextureNode()
diff --git a/examples/quick/scenegraph/threadedanimation/spinner.cpp b/examples/quick/scenegraph/threadedanimation/spinner.cpp
index 7ff1b49..c3eb6d2 100644
--- a/examples/quick/scenegraph/threadedanimation/spinner.cpp
+++ b/examples/quick/scenegraph/threadedanimation/spinner.cpp
@@ -57,7 +57,7 @@ public:
         QSGSimpleTextureNode *textureNode = new QSGSimpleTextureNode();
         textureNode->setTexture(m_texture);
         textureNode->setRect(0, 0, image.width(), image.height());
-        textureNode->setFiltering(QSGTexture::Linear);
+        textureNode->setFiltering(QSGTexture::FilteringLinear);
         appendChildNode(textureNode);
     }
 
diff --git a/src/particles/qquickimageparticle.cpp b/src/particles/qquickimageparticle.cpp
index 3ba0e69..a2470a6 100644
--- a/src/particles/qquickimageparticle.cpp
+++ b/src/particles/qquickimageparticle.cpp
@@ -1368,7 +1368,7 @@ void QQuickImageParticle::finishBuildParticleNodes(QSGNode** node)
             //    = QQuickItemPrivate::get(this)->sceneGraphContext()->textureForFactory(m_imagePix.textureFactory());
             getState<ImageMaterialData>(m_material)->texture = QSGPlainTexture::fromImage(m_image->pix.image());
         }
-        getState<ImageMaterialData>(m_material)->texture->setFiltering(QSGTexture::Linear);
+        getState<ImageMaterialData>(m_material)->texture->setFiltering(QSGTexture::FilteringLinear);
         getState<ImageMaterialData>(m_material)->entry = (qreal) m_entryEffect;
         m_material->setFlag(QSGMaterial::Blending | QSGMaterial::RequiresFullMatrix);
     }
diff --git a/src/quick/items/context2d/qquickcanvasitem.cpp b/src/quick/items/context2d/qquickcanvasitem.cpp
index c31b772..2caf881 100644
--- a/src/quick/items/context2d/qquickcanvasitem.cpp
+++ b/src/quick/items/context2d/qquickcanvasitem.cpp
@@ -738,9 +738,9 @@ QSGNode *QQuickCanvasItem::updatePaintNode(QSGNode *oldNode, UpdatePaintNodeData
 
 
     if (d->smooth)
-        node->setFiltering(QSGTexture::Linear);
+        node->setFiltering(QSGTexture::FilteringLinear);
     else
-        node->setFiltering(QSGTexture::Nearest);
+        node->setFiltering(QSGTexture::FilteringNearest);
 
     if (d->renderStrategy == QQuickCanvasItem::Cooperative) {
         d->context->prepare(d->canvasSize.toSize(), d->tileSize, d->canvasWindow.toRect(), d->dirtyRect.toRect(), d->smooth, antialiasing());
diff --git a/src/quick/items/qquickanimatedsprite.cpp b/src/quick/items/qquickanimatedsprite.cpp
index 5ca17ae..5a3002a 100644
--- a/src/quick/items/qquickanimatedsprite.cpp
+++ b/src/quick/items/qquickanimatedsprite.cpp
@@ -685,7 +685,7 @@ void QQuickAnimatedSprite::prepareNextFrame()
     m_material->animW = w;
     m_material->animH = h;
     m_material->animT = m_interpolate ? progress : 0.0;
-    m_material->texture->setFiltering(smooth() ? QSGTexture::Linear : QSGTexture::Nearest);
+    m_material->texture->setFiltering(smooth() ? QSGTexture::FilteringLinear : QSGTexture::FilteringNearest);
 }
 
 QT_END_NAMESPACE
diff --git a/src/quick/items/qquickborderimage.cpp b/src/quick/items/qquickborderimage.cpp
index 38bbc66..42aae23 100644
--- a/src/quick/items/qquickborderimage.cpp
+++ b/src/quick/items/qquickborderimage.cpp
@@ -611,8 +611,8 @@ QSGNode *QQuickBorderImage::updatePaintNode(QSGNode *oldNode, UpdatePaintNodeDat
     node->setSubSourceRect(QRectF(0, 0, hTiles, vTiles));
     node->setMirror(d->mirror);
 
-    node->setMipmapFiltering(QSGTexture::None);
-    node->setFiltering(d->smooth ? QSGTexture::Linear : QSGTexture::Nearest);
+    node->setMipmapFiltering(QSGTexture::FilteringNone);
+    node->setFiltering(d->smooth ? QSGTexture::FilteringLinear : QSGTexture::FilterginNearest);
     if (innerSourceRect == QRectF(0, 0, 1, 1) && (vTiles > 1 || hTiles > 1)) {
         node->setHorizontalWrapMode(QSGTexture::Repeat);
         node->setVerticalWrapMode(QSGTexture::Repeat);
diff --git a/src/quick/items/qquickframebufferobject.cpp b/src/quick/items/qquickframebufferobject.cpp
index 09a25f4..d602097 100644
--- a/src/quick/items/qquickframebufferobject.cpp
+++ b/src/quick/items/qquickframebufferobject.cpp
@@ -290,7 +290,7 @@ QSGNode *QQuickFramebufferObject::updatePaintNode(QSGNode *node, UpdatePaintNode
                                                     QQuickWindow::TextureHasAlphaChannel));
     }
 
-    n->setFiltering(d->smooth ? QSGTexture::Linear : QSGTexture::Nearest);
+    n->setFiltering(d->smooth ? QSGTexture::FilteringLinear : QSGTexture::FilteringNearest);
     n->setRect(0, 0, width(), height());
 
     n->scheduleRender();
diff --git a/src/quick/items/qquickimage.cpp b/src/quick/items/qquickimage.cpp
index 1e389cf..1c41494 100644
--- a/src/quick/items/qquickimage.cpp
+++ b/src/quick/items/qquickimage.cpp
@@ -64,8 +64,8 @@ public:
 
     QSGTexture *texture() const {
         if (m_texture) {
-            m_texture->setFiltering(m_smooth ? QSGTexture::Linear : QSGTexture::Nearest);
-            m_texture->setMipmapFiltering(m_mipmap ? QSGTexture::Linear : QSGTexture::None);
+            m_texture->setFiltering(m_smooth ? QSGTexture::FilteringLinear : QSGTexture::FilterginNearest);
+            m_texture->setMipmapFiltering(m_mipmap ? QSGTexture::FilteringLinear : QSGTexture::FilterginNone);
             m_texture->setHorizontalWrapMode(QSGTexture::ClampToEdge);
             m_texture->setVerticalWrapMode(QSGTexture::ClampToEdge);
         }
@@ -719,10 +719,10 @@ QSGNode *QQuickImage::updatePaintNode(QSGNode *oldNode, UpdatePaintNodeData *)
         d->pixmapChanged = false;
     }
 
-    node->setMipmapFiltering(d->mipmap ? QSGTexture::Linear : QSGTexture::None);
+    node->setMipmapFiltering(d->mipmap ? QSGTexture::FilteringLinear : QSGTexture::FilterginNone);
     node->setHorizontalWrapMode(hWrap);
     node->setVerticalWrapMode(vWrap);
-    node->setFiltering(d->smooth ? QSGTexture::Linear : QSGTexture::Nearest);
+    node->setFiltering(d->smooth ? QSGTexture::FilterginLinear : QSGTexture::FilterginNearest);
 
     node->setTargetRect(targetRect);
     node->setInnerTargetRect(targetRect);
diff --git a/src/quick/items/qquickshadereffectsource.cpp b/src/quick/items/qquickshadereffectsource.cpp
index ccff988..680b4d6 100644
--- a/src/quick/items/qquickshadereffectsource.cpp
+++ b/src/quick/items/qquickshadereffectsource.cpp
@@ -52,8 +52,8 @@ class QQuickShaderEffectSourceTextureProvider : public QSGTextureProvider
 public:
     QQuickShaderEffectSourceTextureProvider()
         : sourceTexture(0)
-        , mipmapFiltering(QSGTexture::None)
-        , filtering(QSGTexture::Nearest)
+        , mipmapFiltering(QSGTexture::FilterginNone)
+        , filtering(QSGTexture::FilterginNearest)
         , horizontalWrap(QSGTexture::ClampToEdge)
         , verticalWrap(QSGTexture::ClampToEdge)
     {
@@ -248,8 +248,8 @@ QSGTextureProvider *QQuickShaderEffectSource::textureProvider() const
         connect(m_texture, SIGNAL(updateRequested()), m_provider, SIGNAL(textureChanged()));
 
         get_wrap_mode(m_wrapMode, &m_provider->horizontalWrap, &m_provider->verticalWrap);
-        m_provider->mipmapFiltering = mipmap() ? QSGTexture::Linear : QSGTexture::None;
-        m_provider->filtering = smooth() ? QSGTexture::Linear : QSGTexture::Nearest;
+        m_provider->mipmapFiltering = mipmap() ? QSGTexture::FilteringLinear : QSGTexture::FilteringNone;
+        m_provider->filtering = smooth() ? QSGTexture::FilteringLinear : QSGTexture::FilteringNearest;
         m_provider->sourceTexture = m_texture;
     }
     return m_provider;
@@ -648,9 +648,9 @@ QSGNode *QQuickShaderEffectSource::updatePaintNode(QSGNode *oldNode, UpdatePaint
     m_grab = false;
 
     QSGTexture::Filtering filtering = QQuickItemPrivate::get(this)->smooth
-                                            ? QSGTexture::Linear
-                                            : QSGTexture::Nearest;
-    QSGTexture::Filtering mmFiltering = m_mipmap ? filtering : QSGTexture::None;
+                                            ? QSGTexture::FilteringLinear
+                                            : QSGTexture::FilteringNearest;
+    QSGTexture::Filtering mmFiltering = m_mipmap ? filtering : QSGTexture::FilteringNone;
     QSGTexture::WrapMode hWrap, vWrap;
     get_wrap_mode(m_wrapMode, &hWrap, &vWrap);
 
diff --git a/src/quick/items/qquickspritesequence.cpp b/src/quick/items/qquickspritesequence.cpp
index a9a823c..4470b66 100644
--- a/src/quick/items/qquickspritesequence.cpp
+++ b/src/quick/items/qquickspritesequence.cpp
@@ -320,7 +320,7 @@ QSGGeometryNode* QQuickSpriteSequence::buildNode()
         return 0;
     m_sheetSize = QSizeF(image.size());
     m_material->texture = window()->createTextureFromImage(image);
-    m_material->texture->setFiltering(QSGTexture::Linear);
+    m_material->texture->setFiltering(QSGTexture::FilteringLinear);
     m_spriteEngine->start(0);
     m_material->animT = 0;
     m_material->animX1 = m_spriteEngine->spriteX() / m_sheetSize.width();
diff --git a/src/quick/scenegraph/util/qsgatlastexture.cpp b/src/quick/scenegraph/util/qsgatlastexture.cpp
index 5edcb5d..5edfd1d 100644
--- a/src/quick/scenegraph/util/qsgatlastexture.cpp
+++ b/src/quick/scenegraph/util/qsgatlastexture.cpp
@@ -401,7 +401,7 @@ void Atlas::bind(QSGTexture::Filtering filtering)
                 0)); // mipmap (not used ever...)
     }
 
-    GLenum f = filtering == QSGTexture::Nearest ? GL_NEAREST : GL_LINEAR;
+    GLenum f = filtering == QSGTexture::FilteringNearest ? GL_NEAREST : GL_LINEAR;
     funcs->glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, f);
     funcs->glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, f);
 
diff --git a/src/quick/scenegraph/util/qsgdefaultpainternode.cpp b/src/quick/scenegraph/util/qsgdefaultpainternode.cpp
index 6135d95..5c7320e 100644
--- a/src/quick/scenegraph/util/qsgdefaultpainternode.cpp
+++ b/src/quick/scenegraph/util/qsgdefaultpainternode.cpp
@@ -368,8 +368,8 @@ void QSGDefaultPainterNode::setLinearFiltering(bool linearFiltering)
 
     m_linear_filtering = linearFiltering;
 
-    m_material.setFiltering(linearFiltering ? QSGTexture::Linear : QSGTexture::Nearest);
-    m_materialO.setFiltering(linearFiltering ? QSGTexture::Linear : QSGTexture::Nearest);
+    m_material.setFiltering(linearFiltering ? QSGTexture::FilteringLinear : QSGTexture::FilteringNearest);
+    m_materialO.setFiltering(linearFiltering ? QSGTexture::FilteringLinear : QSGTexture::FilteringNearest);
     markDirty(DirtyMaterial);
 }
 
@@ -379,8 +379,8 @@ void QSGDefaultPainterNode::setMipmapping(bool mipmapping)
         return;
 
     m_mipmapping = mipmapping;
-    m_material.setMipmapFiltering(mipmapping ? QSGTexture::Linear : QSGTexture::None);
-    m_materialO.setMipmapFiltering(mipmapping ? QSGTexture::Linear : QSGTexture::None);
+    m_material.setMipmapFiltering(mipmapping ? QSGTexture::FilteringLinear : QSGTexture::FilteringNone);
+    m_materialO.setMipmapFiltering(mipmapping ? QSGTexture::FilteringLinear : QSGTexture::FilteringNone);
     m_dirtyTexture = true;
 }
 
diff --git a/src/quick/scenegraph/util/qsgsimpletexturenode.cpp b/src/quick/scenegraph/util/qsgsimpletexturenode.cpp
index 1fbeba8..257f5a9 100644
--- a/src/quick/scenegraph/util/qsgsimpletexturenode.cpp
+++ b/src/quick/scenegraph/util/qsgsimpletexturenode.cpp
@@ -99,8 +99,8 @@ QSGSimpleTextureNode::QSGSimpleTextureNode()
     setGeometry(&m_geometry);
     setMaterial(&m_material);
     setOpaqueMaterial(&m_opaque_material);
-    m_material.setMipmapFiltering(QSGTexture::None);
-    m_opaque_material.setMipmapFiltering(QSGTexture::None);
+    m_material.setMipmapFiltering(QSGTexture::FilteringNone);
+    m_opaque_material.setMipmapFiltering(QSGTexture::FilteringNone);
 #ifdef QSG_RUNTIME_DESCRIPTION
     qsgnode_set_description(this, QLatin1String("simpletexture"));
 #endif
@@ -119,8 +119,8 @@ QSGSimpleTextureNode::~QSGSimpleTextureNode()
 /*!
     Sets the filtering to be used for this texture node to \a filtering.
 
-    For smooth scaling, use QSGTexture::Linear; for normal scaling, use
-    QSGTexture::Nearest.
+    For smooth scaling, use QSGTexture::FilteringLinear; for normal scaling, use
+    QSGTexture::FilteringNearest.
  */
 void QSGSimpleTextureNode::setFiltering(QSGTexture::Filtering filtering)
 {
diff --git a/src/quick/scenegraph/util/qsgtexture.cpp b/src/quick/scenegraph/util/qsgtexture.cpp
index fc50500..2a1538d 100644
--- a/src/quick/scenegraph/util/qsgtexture.cpp
+++ b/src/quick/scenegraph/util/qsgtexture.cpp
@@ -88,8 +88,8 @@ QSGTexturePrivate::QSGTexturePrivate()
     , filteringChanged(false)
     , horizontalWrap(QSGTexture::ClampToEdge)
     , verticalWrap(QSGTexture::ClampToEdge)
-    , mipmapMode(QSGTexture::None)
-    , filterMode(QSGTexture::Nearest)
+    , mipmapMode(QSGTexture::FilteringNone)
+    , filterMode(QSGTexture::FilteringNearest)
 {
 }
 
@@ -622,7 +622,7 @@ void QSGPlainTexture::bind()
     QOpenGLFunctions *funcs = context->functions();
     if (!m_dirty_texture) {
         funcs->glBindTexture(GL_TEXTURE_2D, m_texture_id);
-        if (mipmapFiltering() != QSGTexture::None && !m_mipmaps_generated) {
+        if (mipmapFiltering() != QSGTexture::FilteringNone && !m_mipmaps_generated) {
             funcs->glGenerateMipmap(GL_TEXTURE_2D);
             m_mipmaps_generated = true;
         }
@@ -741,7 +741,7 @@ void QSGPlainTexture::bind()
     if (profileFrames)
         uploadTime = qsg_renderer_timer.nsecsElapsed();
 
-    if (mipmapFiltering() != QSGTexture::None) {
+    if (mipmapFiltering() != QSGTexture::FilteringNone) {
         funcs->glGenerateMipmap(GL_TEXTURE_2D);
         m_mipmaps_generated = true;
     }
diff --git a/src/quick/scenegraph/util/qsgtexture.h b/src/quick/scenegraph/util/qsgtexture.h
index bdfb0b0..53180e6 100644
--- a/src/quick/scenegraph/util/qsgtexture.h
+++ b/src/quick/scenegraph/util/qsgtexture.h
@@ -56,9 +56,9 @@ public:
     };
 
     enum Filtering {
-        None,
-        Nearest,
-        Linear
+        FilteringNone,
+        FilteringNearest,
+        FilteringLinear
     };
 
     virtual int textureId() const = 0;
diff --git a/src/quick/scenegraph/util/qsgtexture_p.h b/src/quick/scenegraph/util/qsgtexture_p.h
index bd76b98..1497331 100644
--- a/src/quick/scenegraph/util/qsgtexture_p.h
+++ b/src/quick/scenegraph/util/qsgtexture_p.h
@@ -77,7 +77,7 @@ public:
     void setHasAlphaChannel(bool alpha) { m_has_alpha = alpha; }
     bool hasAlphaChannel() const { return m_has_alpha; }
 
-    bool hasMipmaps() const { return mipmapFiltering() != QSGTexture::None; }
+    bool hasMipmaps() const { return mipmapFiltering() != QSGTexture::FilteringNone; }
 
     void setImage(const QImage &image);
     const QImage &image() { return m_image; }
diff --git a/src/quick/scenegraph/util/qsgtexturematerial.cpp b/src/quick/scenegraph/util/qsgtexturematerial.cpp
index 015296f..659c31a 100644
--- a/src/quick/scenegraph/util/qsgtexturematerial.cpp
+++ b/src/quick/scenegraph/util/qsgtexturematerial.cpp
@@ -143,14 +143,14 @@ void QSGOpaqueTextureMaterialShader::updateState(const RenderState &state, QSGMa
     Creates a new QSGOpaqueTextureMaterial.
 
     The default mipmap filtering and filtering mode is set to
-    QSGTexture::Nearest. The default wrap modes is set to
+    QSGTexture::FilteringNearest. The default wrap modes is set to
     \c QSGTexture::ClampToEdge.
 
  */
 QSGOpaqueTextureMaterial::QSGOpaqueTextureMaterial()
     : m_texture(0)
-    , m_filtering(QSGTexture::Nearest)
-    , m_mipmap_filtering(QSGTexture::None)
+    , m_filtering(QSGTexture::FilteringNearest)
+    , m_mipmap_filtering(QSGTexture::FilteringNone)
     , m_horizontal_wrap(QSGTexture::ClampToEdge)
     , m_vertical_wrap(QSGTexture::ClampToEdge)
 {
@@ -216,7 +216,7 @@ void QSGOpaqueTextureMaterial::setTexture(QSGTexture *texture)
 
     Returns this material's mipmap filtering mode.
 
-    The default mipmap mode is \c QSGTexture::Nearest.
+    The default mipmap mode is \c QSGTexture::FilteringNearest.
  */
 
 
@@ -237,7 +237,7 @@ void QSGOpaqueTextureMaterial::setTexture(QSGTexture *texture)
 
     Returns this material's filtering mode.
 
-    The default filtering is \c QSGTexture::Nearest.
+    The default filtering is \c QSGTexture::FilteringNearest.
  */
 
 
-- 
2.3.5

